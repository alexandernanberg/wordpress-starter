// Clearfix
@mixin clearfix {
  &::before,
  &::after {
    content: ' ';
    display: table;
    flex-basis: 0;
  }

  &::after {
    clear: both;
  }
}

// Breakpoint
@mixin breakpoint($value) {
  $bp: nth($value, 1);
  $dir: if(length($value) > 1, nth($value, 2), down);
  $media-query: if($dir == 'down', max-width, min-width);

  @if type-of($bp) == 'number' and unit($bp) == 'px' {
    @media only screen and (#{$media-query}: $bp) {
      @content;
    }
  }
  @else if map-has-key($tweakpoints, $bp) {
    @media only screen and (#{$media-query}: map-get($tweakpoints, $bp)) {
      @content;
    }
  }
  @else if map-has-key($breakpoints, $bp) {
    @media only screen and (#{$media-query}: map-get($breakpoints, $bp)) {
      @content;
    }
  }
  @else {
    @warn 'Could not find point in $tweakpoints or $breakpoints.';
  }
}

// Grid column
@mixin column($value: $grid-columns) {
  @extend .grid__column;
  $val: nth($value, 1);
  $columnWidth: if(length($value) > 2, 100 / nth($value, 3), $grid-columns-width);

  @if unitless($val) {
    width: #{$columnWidth * $val * 1%};
  }
  @else if type-of($val) == 'number' and unit($val) == '%' {
    width: $val;
  }
  @else {
    @warn 'Invalid value passed to grid-column mixin.';
  }
}

// Grid column offset
@mixin column-offset($value: 1) {
  $val: nth($value, 1);
  $columnWidth: if(length($value) > 2, 100 / nth($value, 3), $grid-columns-width);
  margin-left: #{$columnWidth * $val * 1%};
}

// Reset input
@mixin reset-button {
  display: inline-block;
  vertical-align: top;
  outline: none;
  padding: 0;
  border: 0;
  border-radius: 0;
  font-family: $font-family;
  line-height: 1em;
  text-decoration: none;
  text-align: center;
  appearance: none;
  background: transparent;
  cursor: pointer;

  &:focus {
    outline: none;
  }
}

// Reset input
@mixin reset-input {
  border: 0;
  border-radius: 0;
  font-family: $font-family;
  line-height: 1em;
  appearance: none;
  background: transparent;

  &:focus {
    outline: none;
  }
}
